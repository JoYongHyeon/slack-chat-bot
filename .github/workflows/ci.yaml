# GitHub Actions (셀프 호스티드 runner + nerdctl 기반 CI 파이프라인)
# develop 브랜치 머지 시, 커밋 메시지에 [Release]:x.y.z 가 포함되면
# Docker 이미지 빌드 → Harbor 푸시 → kustomization.yaml 버전 갱신 → ArgoCD 자동배포

name: CI Dev

on:
  push:
    # main 에 병합되면 push 이벤트로 CI 자동 실행
    branches: [ "main" ]

jobs:
  build-and-release:
    if: contains(toJSON(github.event.commits), '[Release]:')
    runs-on: [ self-hosted ]

    env:
      HARBOR_PROJECT:  plani-slack-bot
      # 아래는 Harbor 로그인용 계정/비밀번호/레지스트리 도메인 (GitHub Secrets 에서 가져옴)
      HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
      HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}
      HARBOR_REGISTRY: ${{ secrets.HARBOR_REGISTRY }}
      # rootless nerdctl 실행 환경 변수
      XDG_RUNTIME_DIR: /run/user/1000

    steps:
      # 1. GitHub 리포지토리 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 21 설치 (Spring Boot 빌드 환경 준비)
      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      # 3. 커밋 메시지에서 [Release]:x.y.z 버전 문자열 추출
      - name: Extract VERSION
        id: ver
        run: |
          COMMITS='${{ toJSON(github.event.commits) }}'
          VERSION=$(echo "$COMMITS" | grep -oE '\[Release\]:[0-9]+(\.[0-9]+)*' | tail -1 | cut -d: -f2)
          if [ -z "$VERSION" ]; then
            echo "No version found."
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV # 이후 단계에서 사용 가능
          echo "version=$VERSION" >> $GITHUB_OUTPUT


      # 4. Gradle 빌드 (테스트 제외, JAR 생성)
      - name: Build JAR
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test


      # 5. Harbor 레지스트리에 로그인 (nerdctl 사용)
      - name: Harbor login
        run: |
          echo "$HARBOR_PASSWORD" | \
            nerdctl login $HARBOR_REGISTRY \
              -u "$HARBOR_USERNAME" --password-stdin


      # 6. Docker 이미지 빌드 및 태그 (latest + 추출한 버전)
      - name: Build & Push Image
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          IMAGE="$HARBOR_REGISTRY/$HARBOR_PROJECT"
          nerdctl build -f Dockerfile \
            -t $IMAGE:$VERSION .
          nerdctl push $IMAGE:$VERSION

      # 7. kustomization.yaml 파일의 newTag 값을 최신 버전으로 교체 후 커밋/푸시
      #    -> Git 변경을 ArgoCD 가 감지 -> 자동 배포 트리거
      - name: Bump Kustomization.yaml
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          FILE="k8s/dev/kustomization.yaml"
          sed -i "s|newTag: \".*\"|newTag: \"${VERSION}\"|g" "$FILE"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$FILE"
          git commit -m "chore(dev): release ${VERSION} (bump image tag)"
          git push

      # 8. 로컬 캐시 정리 (항상)
      - name: 로컬 캐시 정리 (항상)
        if: always()
        run: |
          nerdctl image prune -f
